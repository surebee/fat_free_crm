= hook(:opportunity_top_section, self, :f => f) do
  .section
    %table
      %tr
        %td
          .label.req.top #{t :name}:
          = f.text_field :name, :style => "width:325px"
        %td= spacer
        %td
          .label #{t :age}:
          = f.text_field :age, :style => "width:20px"
        %td= spacer
        %td
          .label #{t :sex}:
          = f.text_field :sex, :style => "width:10px"
        %td= spacer
    %table
      %tr
        %td
          .label #{t :phone}:
          = f.text_field :phone

        %td= spacer
        %td
          .label #{t :email}:
          = f.text_field :email
        %td= spacer
    %table
      %tr
        %td
          .label #{t :father_name}:
          = f.text_field :father_name, :style => "width:325px"
        %td= spacer
        %td
          .label #{t :voters_in_family}:
          = f.text_field :voters_in_family, :style => "width:20px"
        %td= spacer
    = fields_for(@account) do |a|
      = a.hidden_field :user_id
      = a.hidden_field :access
      = a.hidden_field :assigned_to
      %table
        %tr
          %td
            .label
              #{t :account}
              %span#account_create_title
                (#{t :create_new} #{t :or} <a href='#' onclick='crm.select_account(1); return false;'>#{t :select_existing}</a>):
              %span#account_select_title
                (<a href='#' onclick='crm.create_account(1); return false;'>#{t :create_new}</a> #{t :or} #{t :select_existing}):
              %span#account_disabled_title :

            -# Add [-- None --] account choice when editing existing opportunity that has an account.
            - options = { :selected => @account.id || 0 }
            - options[:include_blank] = true #t(:select_none) unless @opportunity.new_record? || @opportunity.account.blank?

            = collection_select :account, :id, @accounts, :id, :name, options, { :style => "width:330px; display:none;" }
            = a.text_field :name, :style => "width:324px; display:none;"
          %td= spacer
          %td
            .label #{t :stage}:
            = f.select :stage, @stage, { :selected => @opportunity.stage ? @opportunity.stage.to_sym : nil }, { :style => "width:160px" }
          %td= spacer
      %table
        %tr
          %td
            .label.req #{t :assigned_to}:
            = collection_select :opportunity, :assigned_to, @users, :id, :full_name, { :include_blank => t(:myself) }, { :style => "width:160px" }

          %td= spacer
          %td
            .label #{t :close_date}:
            = f.text_field :closes_on, :value => f.object.closes_on ? l(f.object.closes_on, :format => :ddmmyyyy) : "", :style => "width:110px;", :autocomplete => :off
        - if Setting.background_info && Setting.background_info.include?(:opportunity)
          %tr
            %td(colspan="3")
              .label= t(:background_info) << ':'
              = f.text_area :background_info, :style =>"width:500px", :rows => 3

        = render :partial => "/shared/tags", :locals => {:f => f, :span => 3}

        = hook(:opportunity_top_section_bottom, self, :f => f)
